// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: actions.sql

package db

import (
	"context"
)

const createAction = `-- name: CreateAction :one
INSERT INTO actions (
    title,
    username
) VALUES (
    $1, $2
)
RETURNING id, username, title, completed, created_at, change_at
`

type CreateActionParams struct {
	Title    string `json:"title"`
	Username string `json:"username"`
}

func (q *Queries) CreateAction(ctx context.Context, arg CreateActionParams) (Actions, error) {
	row := q.db.QueryRowContext(ctx, createAction, arg.Title, arg.Username)
	var i Actions
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Title,
		&i.Completed,
		&i.CreatedAt,
		&i.ChangeAt,
	)
	return i, err
}

const deleteAction = `-- name: DeleteAction :exec
DELETE FROM actions
WHERE id =$1
`

func (q *Queries) DeleteAction(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAction, id)
	return err
}

const listAction = `-- name: ListAction :many
SELECT id, username, title, completed, created_at, change_at FROM actions
WHERE username = $1
ORDER BY id
`

func (q *Queries) ListAction(ctx context.Context, username string) ([]Actions, error) {
	rows, err := q.db.QueryContext(ctx, listAction, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Actions{}
	for rows.Next() {
		var i Actions
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Title,
			&i.Completed,
			&i.CreatedAt,
			&i.ChangeAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAction = `-- name: UpdateAction :one
UPDATE actions
SET completed = $2,
    title = $3,
    change_at = now()
WHERE id = $1
RETURNING id, username, title, completed, created_at, change_at
`

type UpdateActionParams struct {
	ID        int64  `json:"id"`
	Completed bool   `json:"completed"`
	Title     string `json:"title"`
}

func (q *Queries) UpdateAction(ctx context.Context, arg UpdateActionParams) (Actions, error) {
	row := q.db.QueryRowContext(ctx, updateAction, arg.ID, arg.Completed, arg.Title)
	var i Actions
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Title,
		&i.Completed,
		&i.CreatedAt,
		&i.ChangeAt,
	)
	return i, err
}
