// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: subactions.sql

package db

import (
	"context"
)

const createSubAction = `-- name: CreateSubAction :one
INSERT INTO subactions (
    actions_id,
    title
) VALUES (
    $1, $2
)
RETURNING id, actions_id, title, completed, created_at, change_at
`

type CreateSubActionParams struct {
	ActionsID int64  `json:"actions_id"`
	Title     string `json:"title"`
}

func (q *Queries) CreateSubAction(ctx context.Context, arg CreateSubActionParams) (Subactions, error) {
	row := q.db.QueryRowContext(ctx, createSubAction, arg.ActionsID, arg.Title)
	var i Subactions
	err := row.Scan(
		&i.ID,
		&i.ActionsID,
		&i.Title,
		&i.Completed,
		&i.CreatedAt,
		&i.ChangeAt,
	)
	return i, err
}

const deleteAllSubAction = `-- name: DeleteAllSubAction :exec
DELETE FROM subactions
WHERE actions_id = $1
`

func (q *Queries) DeleteAllSubAction(ctx context.Context, actionsID int64) error {
	_, err := q.db.ExecContext(ctx, deleteAllSubAction, actionsID)
	return err
}

const deleteSubAction = `-- name: DeleteSubAction :exec
DELETE FROM subactions
WHERE id = $1
`

func (q *Queries) DeleteSubAction(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSubAction, id)
	return err
}

const listSubAction = `-- name: ListSubAction :many
SELECT id, actions_id, title, completed, created_at, change_at FROM subactions
WHERE actions_id = $1
ORDER BY id
`

func (q *Queries) ListSubAction(ctx context.Context, actionsID int64) ([]Subactions, error) {
	rows, err := q.db.QueryContext(ctx, listSubAction, actionsID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Subactions{}
	for rows.Next() {
		var i Subactions
		if err := rows.Scan(
			&i.ID,
			&i.ActionsID,
			&i.Title,
			&i.Completed,
			&i.CreatedAt,
			&i.ChangeAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSubAction = `-- name: UpdateSubAction :one
UPDATE subactions
SET title = $2, 
completed = $3,
change_at = now()
WHERE id = $1
RETURNING id, actions_id, title, completed, created_at, change_at
`

type UpdateSubActionParams struct {
	ID        int64  `json:"id"`
	Title     string `json:"title"`
	Completed bool   `json:"completed"`
}

func (q *Queries) UpdateSubAction(ctx context.Context, arg UpdateSubActionParams) (Subactions, error) {
	row := q.db.QueryRowContext(ctx, updateSubAction, arg.ID, arg.Title, arg.Completed)
	var i Subactions
	err := row.Scan(
		&i.ID,
		&i.ActionsID,
		&i.Title,
		&i.Completed,
		&i.CreatedAt,
		&i.ChangeAt,
	)
	return i, err
}
